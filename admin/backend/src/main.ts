import { Application, Router } from "https://deno.land/x/oak@v12.6.1/mod.ts";
import { oakCors } from "https://deno.land/x/cors@v1.2.2/mod.ts";
import { MongoClient, Database } from "https://deno.land/x/mongo@v0.31.2/mod.ts";

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
import gymRoutes from "./routes/gymRoutes.ts";
import authRoutes from "./routes/authRoutes.ts";
import serviceRoutes from "./routes/serviceRoutes.ts";

const app = new Application();
const PORT = Deno.env.get("PORT") || 8000;
const MONGO_URI = Deno.env.get("MONGO_URI") || "mongodb://localhost:27017";
const DB_NAME = "gym_booking";

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ origin –¥–ª—è frontend
async function initializeFrontendOrigin(db: Database) {
  try {
    const originsCollection = db.collection("origins");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ origin –¥–ª—è frontend
    const existingFrontendOrigin = await originsCollection.findOne({ 
      origin: "http://localhost:5180" 
    });
    
    if (!existingFrontendOrigin) {
      // –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π origin –¥–ª—è frontend
      await originsCollection.insertOne({
        gymId: "frontend",  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è frontend
        port: 5180,
        origin: "http://localhost:5180",
        createdAt: new Date()
      });
      
      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π origin –¥–ª—è frontend");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ origin –¥–ª—è frontend:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services
async function initializeServicesCollection(db: Database) {
  try {
    const servicesCollection = db.collection("services");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞–∫–∏–µ-—Ç–æ —É—Å–ª—É–≥–∏
    const servicesCount = await servicesCollection.countDocuments();
    
    if (servicesCount === 0) {
      console.log("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è services —Å–æ–∑–¥–∞–Ω–∞");
    } else {
      console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è services —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥: ${servicesCount}`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ services:", error);
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const client = new MongoClient();
let db: Database;

try {
  await client.connect(MONGO_URI);
  db = client.database(DB_NAME);
  console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º origin –¥–ª—è frontend
  await initializeFrontendOrigin(db);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é services
  await initializeServicesCollection(db);
} catch (error) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö origin –∏–∑ –±–∞–∑—ã
async function getAllowedOrigins(db: Database): Promise<string[]> {
  try {
    const originsCollection = db.collection("origins");
    const origins = await originsCollection.find().toArray();
    return origins.map(origin => origin.origin);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è origin:", error);
    return ["http://localhost:5180"];  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π origin
  }
}

// Middleware –¥–ª—è CORS
app.use(
  oakCors({
    origin: async (requestOrigin) => {
      const allowedOrigins = await getAllowedOrigins(db);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ origin –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
      if (requestOrigin && allowedOrigins.includes(requestOrigin)) {
        return requestOrigin;
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π origin –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return allowedOrigins[0];
    },
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
    credentials: true,
    optionsSuccessStatus: 200
  })
);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(async (ctx, next) => {
  console.log(`${ctx.request.method} ${ctx.request.url}`);
  try {
    await next();
  } catch (err) {
    console.error(err);
    throw err;
  }
});

// Middleware –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.use(async (ctx, next) => {
  ctx.state.db = db;
  await next();
});

// –°–æ–∑–¥–∞–µ–º API —Ä–æ—É—Ç–µ—Ä
const apiRouter = new Router({ prefix: "/api" });

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
apiRouter.use("/gyms", gymRoutes.routes());
apiRouter.use("/gyms", gymRoutes.allowedMethods());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
apiRouter.use("/auth", authRoutes.routes());
apiRouter.use("/auth", authRoutes.allowedMethods());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã —É—Å–ª—É–≥
apiRouter.use("/services", serviceRoutes.routes());
apiRouter.use("/services", serviceRoutes.allowedMethods());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º API —Ä–æ—É—Ç–µ—Ä –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
app.use(apiRouter.routes());
app.use(apiRouter.allowedMethods());

console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

await app.listen({ port: Number(PORT) }); 