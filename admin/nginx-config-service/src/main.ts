import { MongoClient, Database } from "mongo";

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
interface IOrigin {
  gymId: string;
  port: number;
  origin: string;
  createdAt: Date;
}

import { generateNginxConfig } from "./configGenerator.ts";

const MONGO_URI = Deno.env.get("MONGO_URI") || "mongodb://localhost:27017";
const DB_NAME = "gym_booking";
const NGINX_CONFIG_PATH = "/opt/homebrew/etc/nginx/nginx.conf";

async function watchOrigins() {
  const client = new MongoClient();
  await client.connect(MONGO_URI);
  const db: Database = client.database(DB_NAME);
  const originsCollection = db.collection<IOrigin>("origins");

  // –ù–∞—á–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
  const initialOrigins = await originsCollection.find().toArray();
  await generateNginxConfig(initialOrigins, NGINX_CONFIG_PATH);

  // –≠–º—É–ª—è—Ü–∏—è watch, —Ç–∞–∫ –∫–∞–∫ –ø—Ä—è–º–æ–π watch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  let lastCount = initialOrigins.length;
  
  while (true) {
    await new Promise(resolve => setTimeout(resolve, 5000)); // –û–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    try {
      const currentOrigins = await originsCollection.find().toArray();
      
      if (currentOrigins.length !== lastCount) {
        console.log("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ origins");
        await generateNginxConfig(currentOrigins, NGINX_CONFIG_PATH);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ nginx
        const reloadProcess = new Deno.Command("sudo", {
          args: [ 
            "nginx",
            "-c", NGINX_CONFIG_PATH,
            "-s", "reload"
          ],
          stdout: "piped",
          stderr: "piped"
        });
        
        const { success, stderr } = await reloadProcess.output();
        
        if (success) {
          console.log("‚úÖ Nginx —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω");
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ nginx:", 
            new TextDecoder().decode(stderr)
          );
        }
        
        lastCount = currentOrigins.length;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã
if (import.meta.main) {
  console.log("üöÄ –°–ª—É–∂–±–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx –∑–∞–ø—É—â–µ–Ω–∞");

  
  // –ó–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ origins
  watchOrigins().catch(console.error);
}

export { watchOrigins }; 